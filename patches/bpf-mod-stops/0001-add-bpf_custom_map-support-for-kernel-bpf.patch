From 2c1bfa07c5d673edbd53a3199b9ff6e106902168 Mon Sep 17 00:00:00 2001
From: chonepieceyb <1759315491@qq.com>
Date: Mon, 20 Feb 2023 17:33:19 +0800
Subject: [PATCH 1/3] add bpf_custom_map support for kernel/bpf

---
 include/linux/bpf_custom_map.h |  48 +++++
 include/linux/bpf_types.h      |   4 +
 include/uapi/linux/bpf.h       |   1 +
 kernel/bpf/Kconfig             |   6 +
 kernel/bpf/Makefile            |   2 +
 kernel/bpf/custom_map.c        | 314 +++++++++++++++++++++++++++++++++
 kernel/bpf/syscall.c           |   1 +
 tools/include/uapi/linux/bpf.h |   1 +
 tools/lib/bpf/libbpf.c         |   1 +
 9 files changed, 378 insertions(+)
 create mode 100644 include/linux/bpf_custom_map.h
 create mode 100644 kernel/bpf/custom_map.c

diff --git a/include/linux/bpf_custom_map.h b/include/linux/bpf_custom_map.h
new file mode 100644
index 000000000000..4b13134f7cee
--- /dev/null
+++ b/include/linux/bpf_custom_map.h
@@ -0,0 +1,48 @@
+#ifndef _LINUX_BPF_CUSTOM_MAP_H
+#define _LINUX_BPF_CUSTOM_MAP_H 1
+
+#include <linux/types.h>
+#include <linux/bpf.h>
+#include <linux/module.h>
+
+#define BPF_CUSTOM_MAP_NAME_MAX 16
+#define BPF_CUSTOM_MAP_ID_MIN 1
+
+#define BPF_CUSTOM_MAP_GET_ID(attr)		\
+({						\
+	u32 __cmap_id;				\
+	__cmap_id = (attr)->map_extra >> 32;	\
+})
+
+struct bpf_custom_map_ops {
+	/* bpf_map_ops */
+	int (*cmap_alloc_check)(union bpf_attr *attr);
+
+	void* (*cmap_alloc)(union bpf_attr *attr);
+
+	void (*cmap_free)(void *map);
+
+	int (*cmap_update_elem)(void *map, void *key, void *value, u64 flags);
+
+	int (*cmap_delete_elem)(void *map, void *key);
+
+	void* (*cmap_lookup_elem)(void *map, void *key);
+
+
+	/*info for management */
+	u32			id;		/*unique id alloc by IDA*/
+	char			name[BPF_CUSTOM_MAP_NAME_MAX];
+	struct list_head	list;		/*bpf_custom_map_ops_list  */
+	struct module		*owner;
+};
+
+struct bpf_custom_map {
+    struct bpf_map map;
+
+    /*should estimate the access performance (cache aligned?)*/
+    struct bpf_custom_map_ops 	*cmap_ops ____cacheline_aligned;
+
+    /* user alloc area, should be freed by user*/
+    void 			*cmap_data;
+};
+#endif
diff --git a/include/linux/bpf_types.h b/include/linux/bpf_types.h
index 2c6a4f2562a7..d0b6e25e4354 100644
--- a/include/linux/bpf_types.h
+++ b/include/linux/bpf_types.h
@@ -127,6 +127,10 @@ BPF_MAP_TYPE(BPF_MAP_TYPE_STRUCT_OPS, bpf_struct_ops_map_ops)
 BPF_MAP_TYPE(BPF_MAP_TYPE_RINGBUF, ringbuf_map_ops)
 BPF_MAP_TYPE(BPF_MAP_TYPE_BLOOM_FILTER, bloom_filter_map_ops)
 BPF_MAP_TYPE(BPF_MAP_TYPE_USER_RINGBUF, user_ringbuf_map_ops)
+#if defined(CONFIG_BPF_CUSTOM_MAP)
+#include <linux/bpf_custom_map.h>
+BPF_MAP_TYPE(BPF_MAP_TYPE_CUSTOM_MAP, custom_map_ops)
+#endif
 
 BPF_LINK_TYPE(BPF_LINK_TYPE_RAW_TRACEPOINT, raw_tracepoint)
 BPF_LINK_TYPE(BPF_LINK_TYPE_TRACING, tracing)
diff --git a/include/uapi/linux/bpf.h b/include/uapi/linux/bpf.h
index 51b9aa640ad2..cd8e9bde3867 100644
--- a/include/uapi/linux/bpf.h
+++ b/include/uapi/linux/bpf.h
@@ -935,6 +935,7 @@ enum bpf_map_type {
 	BPF_MAP_TYPE_TASK_STORAGE,
 	BPF_MAP_TYPE_BLOOM_FILTER,
 	BPF_MAP_TYPE_USER_RINGBUF,
+	BPF_MAP_TYPE_CUSTOM_MAP,
 };
 
 /* Note that tracing related programs such as
diff --git a/kernel/bpf/Kconfig b/kernel/bpf/Kconfig
index 2dfe1079f772..1be25d9005bf 100644
--- a/kernel/bpf/Kconfig
+++ b/kernel/bpf/Kconfig
@@ -99,4 +99,10 @@ config BPF_LSM
 
 	  If you are unsure how to answer this question, answer N.
 
+config BPF_CUSTOM_MAP
+	bool "Enable BPF custom map"
+	default y
+	help
+	    Enables BPF custom map
+
 endmenu # "BPF subsystem"
diff --git a/kernel/bpf/Makefile b/kernel/bpf/Makefile
index 341c94f208f4..749ce8e1ca93 100644
--- a/kernel/bpf/Makefile
+++ b/kernel/bpf/Makefile
@@ -43,3 +43,5 @@ obj-$(CONFIG_BPF_PRELOAD) += preload/
 obj-$(CONFIG_BPF_SYSCALL) += relo_core.o
 $(obj)/relo_core.o: $(srctree)/tools/lib/bpf/relo_core.c FORCE
 	$(call if_changed_rule,cc_o_c)
+
+obj-$(CONFIG_BPF_CUSTOM_MAP) += custom_map.o
diff --git a/kernel/bpf/custom_map.c b/kernel/bpf/custom_map.c
new file mode 100644
index 000000000000..6e38d00a409d
--- /dev/null
+++ b/kernel/bpf/custom_map.c
@@ -0,0 +1,314 @@
+/*
+ * chonepieceyb 2023-2-20
+ * supported for ebpf custom map
+ */
+
+#include <linux/list.h>
+#include <linux/rculist.h>
+#include <linux/printk.h>
+#include <linux/btf_ids.h>
+#include <linux/bpf_custom_map.h>
+
+static DEFINE_SPINLOCK(bpf_custom_map_list_lock);
+static LIST_HEAD(bpf_custom_map_list);
+
+
+/*
+ * get custom_map by key
+ */
+
+static inline struct bpf_custom_map_ops *bpf_custom_map_get_key(u32 key) {
+	struct bpf_custom_map_ops *map, *e;
+
+	rcu_read_lock();
+	list_for_each_entry_rcu(e, &bpf_custom_map_list, list) {
+		if (e->id == key) {
+			/*find the map*/
+			map = rcu_dereference(e);
+			rcu_read_unlock();
+			return map;
+		}
+	}
+	rcu_read_unlock();
+	return NULL;
+}
+
+static inline struct bpf_custom_map_ops *__bpf_custom_map_get_key(u32 key) {
+	struct bpf_custom_map_ops *e;
+	list_for_each_entry(e, &bpf_custom_map_list, list) {
+		if (e->id == key) {
+			/*find the map*/
+			return e;
+		}
+	}
+	return NULL;
+}
+/*
+ * add custom_map to bpf_custom_map_list
+ * 1. alloc id
+ * 2. add to list
+ */
+
+/**
+ * bpf_register_custom_map() - register a custom_map
+ * @cmap_ops: provided BPF_CUSTOM_MAP
+ *
+ * Return: If success return allocated map id > 0, used in bpf_map.extras
+ * if failed return -EINVAL or -ENOMEM
+ */
+
+int bpf_register_custom_map(struct bpf_custom_map_ops *cmap_ops) {
+	int id;
+
+	/* codes for check cmap */
+	if (!cmap_ops->cmap_alloc || !cmap_ops->cmap_free ||
+		!(cmap_ops->cmap_update_elem || cmap_ops->cmap_lookup_elem || cmap_ops->cmap_delete_elem)) {
+		pr_err("custom map %s does not implement required op!\n", cmap_ops->name);
+		return -EINVAL;
+	}
+
+	if (!cmap_ops->owner) {
+		pr_err("custom map %s does not set owner!\n", cmap_ops->name);
+		return -EINVAL;
+	}
+
+	spin_lock(&bpf_custom_map_list_lock);
+	id = cmap_ops->id;
+
+	if (!id || __bpf_custom_map_get_key(id)) {
+		spin_unlock(&bpf_custom_map_list_lock);
+		pr_err("custom map %s with id:%d exist!\n", cmap_ops->name, id);
+		return -EINVAL;
+	}
+
+	list_add_tail_rcu(&cmap_ops->list, &bpf_custom_map_list);
+
+	spin_unlock(&bpf_custom_map_list_lock);
+
+	pr_debug("register custom map %s with id %d\n", cmap_ops->name, id);
+	/* return id */
+	return 0;
+}
+EXPORT_SYMBOL_GPL(bpf_register_custom_map);
+
+void bpf_unregister_custom_map(struct bpf_custom_map_ops *cmap_ops) {
+	spin_lock(&bpf_custom_map_list_lock);
+	list_del_rcu(&cmap_ops->list);
+	spin_unlock(&bpf_custom_map_list_lock);
+	pr_debug("unregister custom map %s with id %d\n", cmap_ops->name, cmap_ops->id);
+}
+EXPORT_SYMBOL_GPL(bpf_unregister_custom_map);
+
+/***********************************************************
+ * *****************some helper functions*******************
+ * ********************************************************/
+
+
+
+/************************************************************
+ *******************bpf map related ops**********************
+ ************************************************************/
+
+/*
+* custom map alloc check
+* 1. parse custom map id from map.extra
+* 2. get custom_map using id
+* 3. hold module
+* 4. call bpf_custom_map_ops->alloc_check
+* 5. free module
+* 6. check other attrs
+*/
+
+static int custom_map_alloc_check(union bpf_attr *attr)
+{
+
+	int ret;
+	u32 id;
+	struct bpf_custom_map_ops *cmap_ops;
+
+	BUG_ON(attr->map_type != BPF_MAP_TYPE_CUSTOM_MAP);
+
+        ret = 0;
+	id = BPF_CUSTOM_MAP_GET_ID(attr);
+
+	if (id == 0 || !(cmap_ops = bpf_custom_map_get_key(id))) {
+		pr_err("id == 0 or failed to find custom map with id %d\n", id);
+		return -EINVAL;
+	}
+
+	if (!try_module_get(cmap_ops->owner)) {
+		pr_err("custome map have been removed during alloc check!\n");
+		return -ENODEV;
+	}
+
+	if (cmap_ops->cmap_alloc_check)
+		ret = cmap_ops->cmap_alloc_check(attr);
+
+	module_put(cmap_ops->owner);
+
+	/* should add memory barrier here? */
+
+	pr_debug("custom_map %s with id %d alloc check finish, ret %d\n", cmap_ops->name, id, ret);
+
+	return ret;
+}
+
+/*
+ * custom map alloc
+ * 1. hold module
+ * 2. alloc bpf_custom_map
+ * 3. call cmap_ops->alloc
+ *
+ * Resources:
+ * 	module, cmap, cmap_data
+ */
+static struct bpf_map *custom_map_alloc(union bpf_attr *attr)
+{
+	u32 id;
+	struct bpf_custom_map *cmap;
+	struct bpf_custom_map_ops *cmap_ops;
+	void *cmap_data;
+
+	id = BPF_CUSTOM_MAP_GET_ID(attr);
+
+	if (id == 0 || !(cmap_ops = bpf_custom_map_get_key(id))) {
+		pr_err("id == 0 or failed to find custom map with id %d\n", id);
+		return ERR_PTR(-EINVAL);
+	}
+
+	/*1. hold module*/
+	if (!try_module_get(cmap_ops->owner)) {
+		pr_err("custome map have been removed during alloc!\n");
+		return ERR_PTR(-ENODEV);
+	}
+
+	/*2. bpf_custom_map alloc */
+	cmap = bpf_map_area_alloc(sizeof(struct bpf_custom_map), NUMA_NO_NODE);
+	if (!cmap) {
+		cmap = ERR_PTR(-ENOMEM);
+		goto free_module;
+	}
+
+	/*3. cmap alloc */
+	cmap_data = cmap_ops->cmap_alloc(attr);
+
+	if (IS_ERR(cmap_data)) {
+		goto free_cmap_module;
+	}
+
+	/* other attributes */
+	cmap->cmap_ops = cmap_ops;
+	cmap->cmap_data = cmap_data;
+	/* init map attributes eg key_size value_size*/
+	bpf_map_init_from_attr(&cmap->map, attr);
+
+	pr_debug("custom_map %s with id %d alloc finished", cmap_ops->name, cmap_ops->id);
+	return &cmap->map;
+
+free_module:
+	module_put(cmap_ops->owner);
+	return (struct bpf_map*)cmap;
+
+free_cmap_module:
+	bpf_map_area_free(cmap);
+	module_put(cmap_ops->owner);
+	return (struct bpf_map*)cmap_data;
+}
+
+/*
+ * custom map free
+ * 1. free cmap_data
+ * 2. free module
+ * 3. free cmap
+ */
+static void custom_map_free(struct bpf_map *map)
+{
+	struct bpf_custom_map *cmap = container_of(map, struct bpf_custom_map, map);
+	struct bpf_custom_map_ops *cmap_ops = cmap->cmap_ops;
+	cmap_ops->cmap_free(cmap->cmap_data);
+        module_put(cmap_ops->owner);
+	bpf_map_area_free(cmap);
+	pr_debug("custom_map %s with id %d free finished", cmap_ops->name, cmap_ops->id);
+}
+
+/*
+ * custome map update
+ * 1. set context
+ * 2. call cmap_ops->cmap_update_elem
+ */
+static int custom_map_update_elem(struct bpf_map *map, void *key, void *value, u64 map_flags)
+{
+	struct bpf_custom_map *cmap = container_of(map, struct bpf_custom_map, map);
+	struct bpf_custom_map_ops *cmap_ops = cmap->cmap_ops;
+
+	if (unlikely(!cmap_ops->cmap_update_elem)) {
+		return -EINVAL;
+	}
+
+	pr_debug("custom_map %s with id %d update elem finished", cmap_ops->name, cmap_ops->id);
+	return cmap_ops->cmap_update_elem(cmap->cmap_data, key, value, map_flags);
+}
+
+/*
+ * custome map lookoup
+ * 1. set context
+ * 2. call cmap_ops->cmap_lookup_elem
+ */
+static void* custom_map_lookup_elem(struct bpf_map *map, void *key)
+{
+	struct bpf_custom_map *cmap = container_of(map, struct bpf_custom_map, map);
+	struct bpf_custom_map_ops *cmap_ops = cmap->cmap_ops;
+
+	if (unlikely(!cmap_ops->cmap_lookup_elem)) {
+		return ERR_PTR(-EINVAL);
+	}
+
+	pr_debug("custom_map %s with id %d lookup elem finished", cmap_ops->name, cmap_ops->id);
+	return cmap_ops->cmap_lookup_elem(cmap->cmap_data, key);
+}
+
+/*
+ * custom map delete
+ */
+
+static int custom_map_delete_elem(struct bpf_map *map, void *key)
+{
+	struct bpf_custom_map *cmap = container_of(map, struct bpf_custom_map, map);
+	struct bpf_custom_map_ops *cmap_ops = cmap->cmap_ops;
+
+	if (unlikely(!cmap_ops->cmap_delete_elem)) {
+		return -EINVAL;
+	}
+
+	pr_debug("custom_map %s with id %d delete elem finished", cmap_ops->name, cmap_ops->id);
+	return cmap_ops->cmap_delete_elem(cmap->cmap_data, key);
+}
+
+/*
+ * custom map alloc check
+ */
+
+static int custom_map_check_btf(const struct bpf_map *map,
+				const struct btf *btf,
+				const struct btf_type *key_type,
+				const struct btf_type *value_type)
+{
+
+	/* should check the key_type and custome defined key type is the same in the feature*/
+	struct bpf_custom_map *cmap = container_of(map, struct bpf_custom_map, map);
+	struct bpf_custom_map_ops *cmap_ops = cmap->cmap_ops;
+	pr_debug("custom map %s with id %d check btf finished\n", cmap_ops->name, cmap_ops->id);
+	return 0;
+}
+
+BTF_ID_LIST_SINGLE(custom_map_btf_ids, struct, bpf_custom_map)
+const struct bpf_map_ops custom_map_ops = {
+	.map_alloc_check = custom_map_alloc_check,
+        .map_alloc = custom_map_alloc,
+	.map_free = custom_map_free,
+	.map_lookup_elem = custom_map_lookup_elem,
+	.map_delete_elem = custom_map_delete_elem,
+	.map_update_elem = custom_map_update_elem,
+	.map_check_btf = custom_map_check_btf,
+	.map_btf_id = &custom_map_btf_ids[0],
+};
diff --git a/kernel/bpf/syscall.c b/kernel/bpf/syscall.c
index 7b373a5e861f..d2e4dbfc12ef 100644
--- a/kernel/bpf/syscall.c
+++ b/kernel/bpf/syscall.c
@@ -1090,6 +1090,7 @@ static int map_create(union bpf_attr *attr)
 	}
 
 	if (attr->map_type != BPF_MAP_TYPE_BLOOM_FILTER &&
+	    attr->map_type != BPF_MAP_TYPE_CUSTOM_MAP &&
 	    attr->map_extra != 0)
 		return -EINVAL;
 
diff --git a/tools/include/uapi/linux/bpf.h b/tools/include/uapi/linux/bpf.h
index 51b9aa640ad2..cd8e9bde3867 100644
--- a/tools/include/uapi/linux/bpf.h
+++ b/tools/include/uapi/linux/bpf.h
@@ -935,6 +935,7 @@ enum bpf_map_type {
 	BPF_MAP_TYPE_TASK_STORAGE,
 	BPF_MAP_TYPE_BLOOM_FILTER,
 	BPF_MAP_TYPE_USER_RINGBUF,
+	BPF_MAP_TYPE_CUSTOM_MAP,
 };
 
 /* Note that tracing related programs such as
diff --git a/tools/lib/bpf/libbpf.c b/tools/lib/bpf/libbpf.c
index 91b7106a4a73..6f03b87fbb57 100644
--- a/tools/lib/bpf/libbpf.c
+++ b/tools/lib/bpf/libbpf.c
@@ -164,6 +164,7 @@ static const char * const map_type_name[] = {
 	[BPF_MAP_TYPE_TASK_STORAGE]		= "task_storage",
 	[BPF_MAP_TYPE_BLOOM_FILTER]		= "bloom_filter",
 	[BPF_MAP_TYPE_USER_RINGBUF]             = "user_ringbuf",
+	[BPF_MAP_TYPE_CUSTOM_MAP]		= "custom_map",
 };
 
 static const char * const prog_type_name[] = {
-- 
2.34.1

